---

# - debug: msg="Version set to {{ icu_version }}" verbosity=2

- include: setup-RedHat.yml
  static: no
  when: ansible_os_family == "RedHat"

- include: setup-Debian.yml
  static: no
  when: ansible_os_family == "Debian"

- name: Include version-specific variables for ICU.
  include_vars: "icu-{{ icu_version }}.yml"

- name: Download ICU with Checksum
  get_url:
    url: "{{ icu_url }}"
    dest: "{{ icu_base }}"
    checksum: "{{ icu_checksum }}"
    timeout: 30
  register: get_url_result
  until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
  retries: 5
  when: icu_checksum is defined

# - name: Check if file exists without checksum
#   stat:
#     path: "{{ icu_base }}/{{ icu_archive_file }}"
#   register: icu_archive_stat
#   when: icu_checksum is not defined

# - name: Download ICU without checksum
#   command: >
#     chdir={{ icu_base }}
#     wget {{ icu_url }}
#   when: icu_checksum is not defined and not icu_archive_stat.stat.exists

- name: Unarchive ICU
  unarchive:
    src: "{{ icu_base }}/{{ icu_archive_file }}"
    dest: "{{ icu_base }}"
    remote_src: yes
    keep_newer: yes

- name: Check Current ICU Version
  shell: "{{ icu_version_command }}"
  register: icu_config_version
  changed_when: False
  ignore_errors: True

# - name: Current Icu Version Is
#   debug: var=icu_config_version.stdout verbosity=2
#
# - name: Expected Icu Version Is
#   debug: var=icu_config_version_expected verbosity=2

- name: Run Configure ICU
  command: >
      chdir={{ icu_base }}/icu/source
      {{ icu_base }}/icu/source/runConfigureICU Linux/gcc
  register: configureResult
  when: icu_config_version.stdout != icu_config_version_expected

- name: Make Clean
  make:
    chdir: "{{ icu_base }}/icu/source"
    target: clean
  when: icu_config_version.stdout != icu_config_version_expected

- name: Make
  make:
    chdir: "{{ icu_base }}/icu/source"
    target: clean
  when: icu_config_version.stdout != icu_config_version_expected

- name: Make Check
  make:
    chdir: "{{ icu_base }}/icu/source"
    target: check
  when: icu_config_version.stdout != icu_config_version_expected
  ignore_errors: yes

- name: Make Install
  make:
    chdir: "{{ icu_base }}/icu/source"
    target: install
  when: icu_config_version.stdout != icu_config_version_expected

# - debug: var=configureResult verbosity=2
#
# - name: Gmake Clean
#   command: >
#       chdir={{ icu_base }}/icu/source
#       /usr/bin/gmake clean
#   register: cleanResult
#   when: icu_config_version.stdout != icu_config_version_expected
#
# - debug: var=cleanResult verbosity=2
#
# - name: Gmake To Make
#   command: >
#       chdir={{ icu_base }}/icu/source
#       /usr/bin/gmake
#   register: makeResult
#   when: icu_config_version.stdout != icu_config_version_expected
#
# - debug: var=makeResult verbosity=2
#
# - name: Gmake Check
#   command: >
#       chdir={{ icu_base }}/icu/source
#       /usr/bin/gmake check
#   register: checkResult
#   when: icu_config_version.stdout != icu_config_version_expected
#   ignore_errors: yes
#
# - debug: var=checkResult verbosity=2
#
# - name: Gmake Install
#   command: >
#       chdir={{ icu_base }}/icu/source
#       /usr/bin/gmake install
#   register: installResult
#   when: icu_config_version.stdout != icu_config_version_expected
#
# - debug: var=installResult verbosity=2

- name: Set ICU_HOME if configured.
  template:
    src: icu_home.sh.j2
    dest: /etc/profile.d/icu_home.sh
    mode: 0644
  when: icu_home is defined
