---

- name: Fix messagepattern.cpp
  blockinfile:
    dest: "{{ icu_base }}/icu/source/common/messagepattern.cpp"
    marker: "/* {mark} ANSIBLE MANAGED BLOCK - Extend ICU with Ansi type specifiers */"
    insertafter: '^        int32_t.typeIndex=index=skipWhiteSpace\(index\+1\);\n        while\(index<msg.length\(\) && isArgTypeChar\(msg.charAt\(index\)\)\) {\n            \+\+index;\n        }'
    block: "if (msg.charAt(index)=='%' ) {\n      while(index<msg.length() && msg.charAt(index)!=u_rightCurlyBrace) {\n        index++;\n      }\n    }"

- name: Fix fmtable.h
  blockinfile:
    dest: "{{ icu_base }}/icu/source/i18n/unicode/fmtable.h"
    marker: "/* {mark} ANSIBLE MANAGED BLOCK - Extend ICU with Ansi type specifiers */"
    insertafter: '^        kObject$'
    block: "        ,kAnsiPattern"

- name: Fix msgfmt.h include statement
  lineinfile:
    dest: "{{ icu_base }}/icu/source/i18n/unicode/msgfmt.h"
    insertafter: '\#include "unicode/utypes.h"'
    line: "#include <stdlib.h>"


- name: Fix msgfmt.h class
  blockinfile:
    dest: "{{ icu_base }}/icu/source/i18n/unicode/msgfmt.h"
    marker: "/* {mark} ANSIBLE MANAGED BLOCK - Extend ICU with Ansi type specifiers */"
    insertafter: '^class U_I18N_API MessageFormat : public Format {$'
    block: "#ifndef _banmax\n
      #define _banmax(a,b)  (((a) > (b)) ? (a) : (b))\n
      #endif\n
      public:\n
         class U_I18N_API AnsiPatterns {\n
             UnicodeString   **fCPattern; // store ansi type masks (%..).\n
             int fCPatternCapacity;\n
         public:\n
             inline AnsiPatterns(){\n
                 fCPatternCapacity=0;\n
                 fCPattern=NULL;\n
             }\n
             inline ~AnsiPatterns(){\n
                 if (fCPattern && fCPatternCapacity) {\n
                     for (int i=0; i<fCPatternCapacity;i++) {\n
                         if (fCPattern[i])\n
                             delete fCPattern[i];\n
                     }\n
                     free(fCPattern);\n
                 }\n
             }\n
             inline UnicodeString* getAt(const int32_t argnum) {\n
                 return fCPattern[argnum];\n
             }\n
             inline void add(const int32_t argnum, UnicodeString pat) {\n
                 const int growInc=10; //add 10 when increase is needed\n
                 if (fCPatternCapacity==0) {\n
                     fCPatternCapacity=_banmax(growInc,argnum+1);\n
                     fCPattern=(UnicodeString**) malloc( sizeof(fCPattern[0]) * fCPatternCapacity);\n
                     for (int i=0;fCPattern && i<fCPatternCapacity;i++)\n
                         fCPattern[i]=NULL;\n
                 }\n
                 else if (fCPatternCapacity<argnum+1) {\n
                     int newcap=argnum+growInc;\n
                     fCPattern=(UnicodeString**) realloc( fCPattern,sizeof(fCPattern[0]) * newcap);\n
                     for (int i=fCPatternCapacity;fCPattern && i<newcap;i++)\n
                         fCPattern[i]=NULL;\n
                     fCPatternCapacity=newcap;\n
                 }\n
                 fCPattern[argnum]=new UnicodeString(pat);\n
                 //assume all strings in the argument list are UChar*\n
                 //change the Ansi pattern accordingly (for ustdio u_sprintf replacement)\n
                 switch (pat[pat.length()-1] ){\n
                     case 's': //ICU 3.6 U - > S\n
                         fCPattern[argnum]->replace(pat.length()-1,1,(UChar)'S');\n
                         break;\n
                     case 'c':\n
                         fCPattern[argnum]->replace(pat.length()-1,1,(UChar)'C');\n
                         break;\n
                     default:\n
                         break;\n
                 }\n
             }\n
         };\n
      private:\n
         AnsiPatterns ansiPatterns;\n
      public:\n
         inline  UnicodeString* getAnsiPattern(const int32_t argnum) {\n
             return ansiPatterns.getAt(argnum);\n
         }\n
         inline  void addAnsiPattern(const int32_t argnum, UnicodeString pat) {\n
             ansiPatterns.add(argnum,pat);\n
         }\n"


- name: Fix msgfmt.cpp
  replace:
    dest: "{{ icu_base }}/icu/source/i18n/msgfmt.cpp"
    regexp: '^            Format\* formatter \= createAppropriateFormat\(explicitType, style, formattableType, parseError, status\);$'
    replace: "            Format* formatter = NULL;\n
            if (explicitType[0] == '%' ) {\n
                addAnsiPattern(argNumber,explicitType);\n
                formattableType=Formattable::kAnsiPattern;\n
            }\n
            else\n
                formatter = createAppropriateFormat(explicitType, style, formattableType, parseError, status);\n"
